日期：2020/02/14 10:30

求职过程中的被第3个面试官吊打经历

面试官题目中没有回答出来的：
1.什么是php-fpm，以及它的作用 ：
PHP-FPM(PHP FastCGI Process Manager)意：PHP FastCGI 进程管理器，用于管理PHP 进程池的软件。
当客户端发送动态请求，如请求php文件时，请求到达web服务器如nginx或者Apache，由于web服务器只能处理html这样的静态资源的请求，web服务器会将动态请求转发给pfp-fpm进程去处理，php-fpm处理完之后返回结果给web服务器再返回给客户端。

2.php面向对象中 static和self的区别
static和self的使用都是在类内部的方法中使用的。
使用static::调用静态方法时，static代表的是调用这个方法的类
使用self::调用静态方法时，self代表的是定义这个方法的类

例如：
<?php 
    class Person{
        public static function getName(){
            echo "Person<br/>";
        }
    }
    
    class Student extends Person{
        public static function getName(){
            echo "Student<br/>";
        }
        
        public static function callSelf(){
            self::getName();
        }
        
        public static function callStatic(){
            static::getName();
        }
    }
    
    Student::callSelf();    # Person
    Student::callStatic();  # Student
?>

请问redis应用场景
缓存：一般用redis的string类型。通过将数据序列化存为redis的String类型实现。
消息队列：使用list类型实现。
时间轴：用list实现
排行榜：使用zset类型实现。
计数器：string,hash或者zset都有incr方法，都可以做计时器。
好友关系：使用set类型的求交集并集差集可以实现。
分布式锁：使用String类型实现

mysql事务
事务（transaction）是作为一个单元的一组有序的数据库操作。如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消。

Unicode和utf-8的关系


请问请求结束后,连接是否会马上关闭,为什么
答:不会,发起关闭的一方会进入time_wait状态,等待2MSL才会关闭

追问:那么为什么要等2MSL,time_wait状态的意义是什么
四次分手的过程:
在长连接的情境下,客户端A会主动发起关闭连接,服务端B会被动关闭连接
第一次分手:A发送FIN给B,发送关闭连接的信号,A进入FIN-WAIT-1状态
第二次分手:B接受到信号,B开始关闭连接,同时B发送ACK给A,B进入CLOSE-WAIT状态(正在关闭连接的状态),A也进入FIN-WAIT-2状态(等待B关闭连接的状态)
第三次分手:B完成关闭连接,于是B发送FIN+ACK给A
第四次分手:A发送ACK给B,A进入TIME-WAIT 状态,会等待2MSL时长(MSL 最长报文段寿命，报文段在网络中能够存活的最长时间,2MSL约为2分钟)

最后B接受到A的ACK报文,B进入close状态(连接真正关闭)

TIME_WAIT的意义在于
（1）可靠地实现TCP全双工连接的终止

为了保证A发送的最后一个ACK报文段能够到达B。

A给B发送的ACK可能会丢失，B收不到A发送的确认，B会超时重传FIN+ACK报文段，此时A处于2MSL时间内，就可以收到B重传的FIN+ACK报文段，接着A重传一次确认，重启2MSL计时器。最后，A和B都能够正常进入到CLOSED状态。

如果A在发完ACK后直接立即释放连接，而不等待一段时间，就无法收到B重传的FIN+ACK报文段，也就不会再次发送确认报文段，这样，B就无法按照正常步骤进入CLOSED状态。

（2）允许旧的报文段在网络中消逝  

A发送确认后，该确认报文段可能因为路由器异常在网络中发生“迷途”，并没有到达B，该确认报文段可以称为旧的报文段。A在超时后进行重传， 发送新的报文段，B在收到新的报文段后进入CLOSED状态。在这之后，发生迷途的旧报文段可能到达了B，通常情况下，该报文段会被丢弃，不会造成任何的影响。但是如果两个相同主机A和B之间又建立了一个具有相同端口号的新连接，那么旧的报文段可能会被看成是新连接的报文段，如果旧的报文段中数据的任何序列号恰恰在新连接的当前接收窗口中，数据就会被重新接收，对连接造成破坏。为了避免这种情况，TCP不允许处于TIME_WAIT状态的连接启动一个新的连接，因为TIME_WAIT状态持续2MSL，就可以保证当再次成功建立一个TCP连接的时，来自之前连接的旧的报文段已经在网络中消逝，不会再出现在新的连接中。



TCP连接的限制流量的参数


括号题，请写一个函数，判断一串括号是否合法，如 ({[]()}){},{({})},{[]()}这些都是合法的。
思路：用数组模拟栈，栈是后进先出的一种数据类型。将开始括号入栈，而结束括号是不入栈的，如果找到结束括号则比对栈中的最后一个元素，如果两者相对应则该元素出栈。所以如果是合法的括号字符串，找到的结束括号一定是和栈最后一个元素是对应的。

如下：
function checkKuohao($str){
    $s = ["{","[","("];
    $e = ["}","]",")"];
    $arr = [];
    $strlen = strlen($str);
    
    if($strlen%2){
        return false;
    }
    
    for($i=0;$i<$strlen;$i++){
        if(in_array($str[$i],$s)){
            $arr[]=$str[$i];
        }
        
        if(in_array($str[$i],$e)){
            $last=$arr[count($arr)-1];
            if($e[array_search($last,$s)]!=$str[$i]){
                return false;
            }
            array_pop($arr);
        }
    }
    
    if(count($arr)){
        return false;
    }
    
    return true;
}






日期：2020/02/25

被第5个面试官吊打

面试官出的题目：

1.为什么将文章title和文章内容分两个表存：
答：
我：因为文章内容长度会很大，但是文章内容不会被经常查询到。而文章title，发布时间这些会经常查询。存在一张表会有性能问题。
面试官：那为什么会有性能问题呢，我如果只查标题，执行select title而不是select *的情况下，是一张表还是分表会有区别吗。
我（想了想）：因为一张表是存在一个文件上，如果内容和标题等信息存在一张表上，记录条数增加后文件会很大，读写起来磁盘IO开销就大，从而很消耗性能。

（关键点是，文件很大造成IO开销大）

2.如果文章很长，数据很多，机器容纳不下这么多数据，这个时候有什么方案
。。。。答不出来 (做分布式呀笨,将数据分散到多台主机的mysql存储就可以了)

3.在做python爬虫的时候，如何实现避免同一个页面被重复爬取。
我：使用set类型对url去重
面试官追问：在一次性的爬取中，如果集合中存储了大量url，主机无法容纳这么多链接怎么办，能否让机器保存更多链接并且能够快速判断某链接是否是这些已爬取的链接。
我：存到数据库？
面试官开始引导，但我还是没回答出来。

哎，数据过多就用分布式，而且希望快速判断链接是否重复，还有什么比内存读写更快的呢。
答案是使用使用分布式redis，在多台机器上部署redis，将所有爬过的url分散存到多台机器的redis上。


4.tp5的自动加载如何实现
我：使用魔术方法 __autoload()
面试官：那具体是怎么实现的呢？
我：...

5.php-fpm和php作为模块运行的区别
我：（回答了nginx+php-fpm和Apache+php模块的区别，结果变成回答了nginx和Apache的区别，也不知道有没有答对）

6.为什么php的一个变量可以赋值为整型又可以赋值为字符串
我：回答了zval和zend_value，最后说了，当重新赋值时变量指向另一块内存，此时才说到了关键。

7.数据库索引使用了什么数据结构
我：...二叉树？
面试官：树没错，不过是多叉树

8.如何开启和查看一个慢日志文件
我：（犹豫了一下）在mysql配置文件中配置，慢日志是一个二进制文件，但是mysql提供了一个命令可以输出成文本格式方便查看。
面试官：如何分析慢日志中的语句性能问题
我：使用explain命令
面试官：查看哪些指标
我：有没有使用索引，扫描了多少条记录等

。。。
（还问了很多其他问题）

最后面试官结论：
和科班生相比，基础较为薄弱，但看上去好像挺聪明的。
（有褒有贬，但贬强于褒）



日期：2020/02/26

被第6个面试官吊打

面试官出的题目：

1.进程和线程
进程是资源分配的最小单位（也就是说系统只会给一个进程分配资源（CPU，内存，IO），而不会说为一个线程分配资源。），线程是程序执行的最小单位（也就是说，真正做事情的是线程而不是进程，所以一个进程里面至少要有一个线程，否则这个进程啥都干不了）。

所以进程更像是一个容器，容纳线程，容纳系统分配的内存和io文件句柄
线程更像是一个工人，真正执行任务的是线程而不是进程。

进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。


线程之间的通信更方便，同一进程下的线程共享全局变量、静态变量等数据，而进程之间的通信需要以通信的方式（IPC)进行。不过如何处理好同步与互斥是编写多线程程序的难点。

多进程程序更健壮，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。



线程和进程的关系：
一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。线程是操作系统可识别的最小执行和调度单位。
资源分配给进程，同一进程的所有线程共享该进程的所有资源。 同一进程中的多个线程共享代码段(代码和常量)，数据段(全局变量和静态变量)，扩展段(堆存储)。但是每个线程拥有自己的栈段，栈段又叫运行时段，用来存放所有局部变量和临时变量。




关于阻塞会非阻塞:
阻塞：就是在执行IO操作获取数据时，这个IO可能会需要一定时间才能等到数据的返回，然后才能执行下面的命令，没有充分利用CPU资源。相当于是顺序执行程序。
非阻塞：线程在进行IO操作时，无需等待数据的返回就可以继续执行下面的命令，充分利用CPU资源。

如果程序是单线程的情况下，在接着执行下面的代码的过程中需要额外不断的轮询查看这个IO请求的数据是否返回。使用多线程则一个线程等待数据返回另一个线程继续执行下面的代码。

关于同步和异步：
同步：是指当线程进行IO请求时，是你主动关心数据的返回。
异步：是当前程序无需主动关心数据的返回，当数据返回时会有相关的事件通知。



关于并行，并发和顺序执行
顺序执行：执行完了一个任务再执行下一个任务
并发：是指两个或多个任务在同一时间间隔执行,交替进行。如根据时间片切换执行就是并发，但其实同一时刻还是只做了一件事
并行：两个或者多个任务在同一时刻执行。


线程，进程和CPU核数的关系：
多线程，多进程是并行还是并发取决于你的CPU核心数量。

对于多进程(资料或者文章说的多进程都是指多进程单线程)而言：
单核CPU处理多进程只能并发(时间片切换)
多核CPU处理多进程可以并行

对于多线程而言:
单核CPU处理(一个进程的)多线程只能并发(时间片切换)
多核CPU处理(一个进程的)多线程可以并行



关于多CPU和多核CPU的区别:
多CPU是指多个单核CPU,多核CPU是一个CPU但这个CPU有多核

如果要说具体的区别就要讨论到一些硬件方面的东西,这里直说结论
多核CPU性能更高,处理起多线程多进程更快
多核CPU更贵,而且是贵很多

2.http和tcp的关系
我的理解,这类似与请求和连接的关系,tcp层是负责建立连接的,而http层负责发送请求,连接就像一个通道,请求要通过这个通道才能传到另一台机器,没有连接就不能发送请求
所以http和tcp的关系是http依赖于tcp,没有tcp就无法发送请求

3.长连接和短连接的区别以及它们的应用场景
短连接是建立起tcp连接后,发送完请求并接受完响应之后就有服务端关闭连接,短连接只能发送一个请求
长连接建立其tcp连接之后,可以保持连接并发送多个请求,可以节省每次发送请求时都要建立一次连接带来的开销和时间

长连接多用于操作频繁，点对点的通讯，而且连接数不能太多情况,例如聊天室,在线客服
短连接适用于打开网页


日期：2020/03/11

被第7个面试官吊打(前端岗位)

面试官出的题目：

如何对js数组进行过滤?
答:使用for循环,或者使用arr的filter方法传入回调函数里面写过滤的条件,返回值是true/false


在使用ajax的时候,会遇到多重嵌套的问题,比如在请求完一个url后再请求一个url,请求完第二个url后再请求url,请问该如何解决这个问题
答:使用ES6语法中的promise对象,用then方法连缀,在then方法中传入回调函数
    或者使用ES7语法中的async和await,在等待请求时阻塞,这样就不会存在嵌套
追问:then方法中的回调函数返回什么
答:还是一个promise对象

你常用的浏览器有哪些?有使用过浏览器的那些功能?
答:火狐谷歌,使用F12查看网络请求和dom结构,使用ctrl+u查看源代码,查看一些console报错
追问:有使用过浏览器的断点调试功能吗
答:......没有,我是用alert进行断点的


vue有那几个生命周期?
答:...有5个,但是我只记得created()和mounted()这两个,一般用这两个进行初始化
追问:请问created()和mounted()的区别
答:...不知道


vue中的计算属性computed和watch有什么区别?
答:...我没用过watch,只用过computed计算属性
追问:请问一般什么时候需要用到计算属性
答:当要使用的数据是和已有的data属性中数据有关联的需要进行一定逻辑处理的数据;
只要在computed属性中定义方法,在html中用{{方法名}}的方式就能调用计算属性


js中的宏任务和为任务有哪些,他们的原理是?
答:...不知道





日期：2020/03/12

被第8次面试吊打,吊打我的是一份笔试题而不是面试官

笔试题出的题目

笔试试题
职位：WEB全栈工程师                              时长：40-60分钟

1、去靶场打靶，每颗子弹1块钱，但可以用2个弹壳换一颗子弹。问：你有20元钱，最多可以打的子弹个数?_________
我的答案:38
正确答案:39或40
算法是:每打两颗子弹就立刻换1颗子弹,再打;这样的换发可以打到最多的40发
如果一次性打完再换,换完再一次性打完再换就只能打38发

2、有一个养猪场，当前有一定的饲料库存，每天也会生产固定数量的饲料。已知如果养猪27头，12天可以吃完所有的饲料；养猪23头，18天可以吃完。如果养猪21头，那么___24___天能把猪场的饲料全部吃完。
我的答案:24
正确答案:24
算法:
设初始库存为x千克,每天补充y千克,每头猪每天吃1千克则可以列式为:

x+12y=27*12
x+18y=23*18

解出 x和y

假设21头猪在z天可以吃完全部饲料,可以列式为:
x+yz=21z

得到 z=24


3、盒子中装有3个红球，3个蓝球，4个黄球，从中抽取三次，每次抽一个球，取完不放回，则每种颜色球各得一个的概率是________
我的答案:23/90
正确答案:3/10

算法:至今未知


4、编码题目：
写一个函数，算出两个文件的相对路径。可理解为已经在a的目录下，计算去b所在目录的相对路径。
例如：$a='/a/b/12/34/c.php', $b='/a/b/c/d/e.php'; 计算出$b 相对于 $a 的相对路径应该是 ../../c/d.

<?php
    // $a="/a/b/12/34/c.php";
    // $b="/a/b/c/d/e.php";
    $a="/a/b/c/x/1.php";
    $b="/a/d/2.txt";
    
    function getPath($me,$target){
        $meArr = explode("/",trim($me,"/"));
        $targetArr = $targetArr2 = explode("/",trim($target,"/"));
        $dirArr=[];
        foreach($meArr as $k=>$v){
            if(isset($targetArr[$k]) && $v==$targetArr[$k] ){
                array_shift($meArr);
                array_shift($targetArr2);
            }else{
                 array_push($dirArr,"..");
            }
        }
        array_pop($targetArr2);
        $resArr=array_merge($dirArr,$targetArr2);
        
        return implode("/",$resArr);
    }
    
    echo getPath($a,$b);
?>


由于4题中错了两题,我连面试官都见不到




日期：2020/03/13

被第9个面试官吊打(前端岗位,但是面试官看了我的简历后改问后端的问题)

面试官出的题目：

请问跨域请求有几种方式
答:如果是jQuery,可以使用$.getJSON()或者$.ajax({datatype:"jsonp",jsonp:"回调函数的get参数名",jsonpCallback:"回调函数名"})
如果是js则需要动态创建一个<script>标签,并将标签节点添加到document中,并且提前定义好回调函数
在服务端要接受 回调函数名和数据,输出的内容为
echo $_GET['cb']."({$_GET['data']})";


请问session的怎么实现的
答:session的session_id存入cookie中,是存在本地的
session值存入服务器的session文件中,session文件以sess_{session_id}命名,里面的内容是一堆序列化的字符串

当跳转页面的时候,服务器会从cookie中找到session_id,根据session_id找到session文件获取里面的内容

追问:如果网站部署在多台节点进行负载均衡,怎么保证用户在访问到不同的台节点时都能获取到session
答:如果存在mysql中的话,要么每一个节点都存放一份用户的session,要么做分布式对mysql进行分区,session数据分散存入到多个节点.

追问:但是用mysql明显是不合理的,mysql读写会很慢...
抢答:那就将session存入redis中,将redis部署在一台独立的同机房的服务器上,session存到redis中,内存读写很快,同机房的机器的网络传输时间不会很长

追问:那怎么使用redis存储session呢?
答:通过sessionid()函数获取session_id,然后key以sess_作为前缀拼接上session_id,把session值存入value中
存的时候记得要设置过期时间,因为session会在会话结束时失效,如果redis中的session不设过期时间就会常驻与内存中造成浪费

追问:代码上具体怎么连接redis
答:$r=new Redis();$r->connect(ip,端口);即可
用get()方法可以获取

追问:如果redis要进行条件查询该怎么做?比如redis中存入了用户的所有字段的信息,怎么根据用户id获取用户名
答:在设计key的时候,要这样设计  表名:id:id值:字段名
例如 user:id:10:name
在查询的时候,只需将$user_id拼接到这个可以中即可 : $r->get("user:id:{$user_id}:name");


嗯,知道csrf攻击和xss攻击吗
答:额,xss是往网站中注入脚本吗,csrf我不知道

那知道https的原理吗,https是用什么算法加密的
答:...不知道(居然没有答出是hash算法,当时还差点想到了)

知道https怎么优化吗
答:...不知道

嗯,好的谢谢
...


日期：2020/03/16 17 

被第10和第11个面试官吊打：

问题1：memcache和redis的区别：
1.memcache只有k-v结构，而redis除了k-v结构之外还有链表，集合，有序集合，哈希，位图，发布订阅等功能。
memcache更适合缓存一些静态的数据项如图片，视频
2.memcache是多线程，redis是单线程，所有命令会放在一个队列中排队一一执行，所以memcache能更好的利用CPU
3.memcache无法持久化，断电就会丢失数据，除非写脚本将memcache中的数据写入磁盘；redis支持持久化，即使重启或者断电也能恢复数据
4.redis还是用了虚拟化的技术，当redis中的数据满了的时候可以将一些很久不用的数据交换到磁盘中；memcache不行


问题2：api接口该如何加密
（加密是为了防止别人掉我们的接口），可以使用这样的方案：

前端要生成一个token并通过url传到后端，这个token可以前端和后端都存着有的一个字符串+时间+一串前端生成的随机数，再经过md5加密。
例如：md5(test20200317s29g)=xxxx

访问的url为： /api.php?rand=s29g&token=xxxx      # 将随机生成的随机数通过url传给后台，因为后台不知道这个随机数

在服务端：后端知道公钥 test , 知道时间 20200317 ,也知道传过来的随机数 s29g ，可以用 md5运算得到一串数字，与这个前端传过来的token做比较。

上面是网上的答案，下面是我的想法：

1.如果是特定用户才能访问的请求，建议使用 appid和scret 并以post的方式传输。
appid和scret可以存到数据库的用户表中（或者和用户信息存入redis的同一个hash中），一个用户有一个appid和scret
当传过来的时候根据cookie中的用户登录态（如用户名或者用户id或者用户的token等）从数据库中比对appid和scret即可，此时appid和scret可以随机生成
如果appid和scret不存入数据库，则建议appid和scret有一定的关系，例如appid是随机生成的，appid拼上用户名进行md5加密就是scret，这样也可以验证appid和scret是否对应

2.如果是一些公有的提交性质的链接请求，例如提交表单，游客发表评论什么的，可以在生成一个页面的时候在后端随机生成一个token字符串例如abcd，并且加密放入cookie中，cookie名是和这个接口有关的一个字符串拼上一个前缀如apiToken_post_article,值是md5(abcd)。然后页面渲染的时候这个token放到标签属性中。当用户触发事件例如点击按钮，就会将明文abcd放到url参数中携带过来。在后端比对这个abcd和cookie中的加密密文是否相同

3.如果是很常见的get请求，例如一些列表页，文章页什么的。
不加密，但是为了防止用户刷链接，可以用redis设定多少秒内不能请求超过多少次。key是页面类型_用户ip，例如 articleDetail_10.101.22.57


====================================================

日期：2020/10/22 9:40

明源云笔试题

1.msyql又一个联合索引 index_a_b_c(a,b,c)，a和c是int型，b是string型，"where c=10 and a=5 and b='wh'"使用到了联合索引，请问为什么？

2.有用户表和订单表，数据量分别是500W和1000W,我希望能够用各种条件查到任意的前2W条数据，请给出3种方案。

3.在lnmp技术栈中，一个网站的活跃用户又10W个，最近出现了访问缓慢的情况，而且是不是出现504，请问该如何排查？


4.请问为什么使用消息队列。请说说看各种消息队列的优缺点。

5.组合题：斐波那契数列的递归实现和优化