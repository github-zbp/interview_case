一、多线程的切换为什么比多进程切换快

首先介绍进程和线程的概念：
进程是系统进行资源分配和调度的基本单位
线程是系统进行运行调度的最小单位

这意味着系统只会给进程分配资源（比如单独的一块内存），但是不会单独给线程分配资源

进程和线程的关系：
一个进程包含至少一个线程也可以包含多个线程，进程除了包含线程外还包含其他的资源和数据，一个进程内的多个线程可以共享这些资源。
线程才是进程执行任务的具体执行者。

什么是线程或者进程的切换（又称为上下文切换）
计算机系统为了能够让多个程序并发运行，会让多个线程或者进程交替运行因此会发生线程或进程的切换。
上下文切换主要分两种情况：
a.多个进程或者线程被分配一小段时间片，进程或线程在这一小段时间片内运行完毕后会被动让出CPU给其他进程或线程使用
b.当进程或者线程遇到阻塞（例如IO操作），为了不让CPU等待而主动让出CPU给其他进程或线程来执行任务并进入到等待队列直到IO操作完成就会重新进入就绪队列重新等待被调度（重新等待获取CPU）。

上面说了进程和线程为什么需要切换（为了任务能够并发执行）和切换的两种情况。



下面说说线程的切换为什么比进程块。

首先我们要了解虚拟内存和物理内存以及进程控制块的概念

进程在它还不是进程的时候，他只是一段可执行程序，这个程序是放在磁盘中的。

当我们开始执行它的时候，它会被加载到内存里，可执行程序就变成了进程。这时进程还没有被调度，在就绪队列中排队等着被内核调度。

当进程被内核调度，进程会占有CPU，并把该进程的数据从内存写入到CPU的寄存器，让CPU执行进程中的代码（必须要写入到寄存器CPU才可以执行）。此时进程就从就绪状态变为执行状态（不知道什么是就绪状态和执行状态以及就绪队列等待队列的朋友可以参考我的博客内的这篇文章）。


进程对于操作系统而言是一个抽象的概念，系统需要通过一个东西来描述进程，然后才能管理进程。于是PCB就出来了，操作系统通过PCB（进程控制块）来描述进程它就是一个结构体，用来描述进程。在Linux下，就是task_struct结构体。


再说说物理内存和虚拟内存
物理内存：是真实的硬件设备如内存条
虚拟内存：是利用磁盘空间虚拟出来的一块逻辑内存，用于虚拟内存的磁盘空间被称为交换空间（所以虚拟内存其实是磁盘）

虚拟内存的出现是为了解决一个进程运行过程中，物理内存不足的情况。
虚拟内存会被分成多个页，而物理内存会被分为多个页帧，虚拟内存的页和物理内存的页帧是有映射关系的，也就是说虚拟内存的一小块对应着物理内存的一小块。虚拟内存和物理内存的映射关系被写在了“页表”中。可是我们知道虚拟内存往往比物理内存大。一台计算机可能物理内存只有1G，而虚拟内存有4G。那么虚拟内存中有3G是映射不到物理内存的，也就是说这3G的虚拟内存的数据不是放在物理内存而是放在磁盘中（放在交换空间中）。
当一个进程假如会用到4G的内存，而且也被分配了一个4G的虚拟内存，而物理内存只有1G，此时进程的数据会有1G放在物理内存中，3G放在交换空间（磁盘）中。当用到虚拟内存中的某一页内存的数据，而这一页虚拟内存在物理内存中找不到映射的时候，就会将物理内存中很久没用到的数据写入到交换空间，把进程需要使用到的数据从磁盘写入到物理内存，并且更改页表，把虚拟内存的那一页映射到物理内存刚交换完数据的那一页帧上。

所以虚拟内存是通过数据在物理内存和磁盘之间的交换来做到弥补内存不足的缺点的。


在32位的系统下，每个运行的进程都会拿到连续的4G的虚拟内存（但映射到物理内存上可能就是不连续的）。进程被分配了4G的虚拟内存，不代表进程真的使用了4G的内存，真正使用了多少内存要看进程在运行过程中产生了多少数据。4G的虚拟内存中3G是用户空间，1G是内核空间，而PCB进程控制块就是存储在这1G的内核空间中。

内核空间的存在是因为进程需要调用一些系统调用（比如IO操作就一定会进行系统调用）。

用户空间是用户程序（就是我们程序员写的代码程序）可以支配和操控的空间，而内核空间是内核程序才可以操控和进入的空间。当进程需要进行系统调用时，CPU会从用户态切换到内核态，这个过程的开销不亚于一次进程间切换。

内核空间是所有进程共享的，而用户空间是每个进程私有的。

假如，现在计算机上运行着5个进程，每个进程都被分配了4G的虚拟内存。每一块4G的虚拟内存都把自己的页映射到了物理内存上。每一个进程都对应着一张虚拟内存映射到物理内存的页表。物理内存就保存了多个进程的内存数据。如下图所示：


我们之前说，一个进程中的多个线程是共用这个进程的内存数据的（共用同一块虚拟内存）。虽然多线程和多进程的切换都会涉及到数据在内存和寄存器之间的交换。
但是多线程的切换是CPU把线程A的数据从寄存器写到虚拟内存，再从同一块虚拟内存读取线程B的数据到寄存器完成上下文切换，数据从寄存器读写到物理内存查的是同一张页表。而多进程的切换会让寄存器把进程A的数据写到进程A的虚拟内存，再从进程B的虚拟内存读取进程B的数据，这个过程查的是不同的两张页表从而完成的进程A切换到进程B。
而切换前物理内存中存的可能都是进程A的数据，当切换为进程B的时候寄存器从B的虚拟内存取数据就会去查B的页表映射，页表发现物理内存中没有B的数据，就会从磁盘中把数据交换到物理内存。

也就是说进程的切换很可能涉及到数据从磁盘写入到物理内存，这个过程会比较耗时。


二、到底用多线程还是多进程比较好？