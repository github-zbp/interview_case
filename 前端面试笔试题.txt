
** ES6 **

nodejs和js中的this的区别:
nodejs:在全局中,this是一个{}空对象(全局this不是指向global对象,而是指向module.exports);在函数中,this指向global对象;在构造函数中,this指向实例对象
js:在全局中,this是window对象;在函数中,this依旧指向window对象;在构造函数中,this指向实例对象

例如,在nodejs环境:
name = "zbp"

console.log(global.name)    //zbp
console.log(this.name)      //undefined

例如:
function fn(){
  this.num = 10;
}
fn();

console.log(global.num); 10

例如:
function test(){
    this.name = "zbp";
}

test()
console.log(name)           // nodejs或浏览器下:zbp
console.log(this); //nodejs下{}, 浏览器下 window
console.log(this.name); //nodejs下:undefined, 浏览器下:zbp
//console.log(window.name)   //在浏览器环境
//console.log(global.name)   //在nodejs环境


又例如：
var age = 18
var a={
    name:"zbp",
    age1:this.age       # this执行window或者global
}

console.log(a.age1)     # 18


解构赋值
var obj={name:"1",age:"2",sex:"3"}
var {name,age}=obj
var {name:n}=obj

arr=[1,2,3,4,5]
var [a,b,c,...d]=arr


集合类型
s = new Set([1,2,3,4])
集合只能用s.forEach(function(v,i){}) 遍历

Map类型
Map类型和对象类型的唯一区别,Map的key可以是任何类型,对象的key只能为标量
Map只能用forEach() 遍历

关于迭代器和for of 循环,和for in 循环不同的是,for of循环中的返回的不是key而是value


JS是没有类这个概念的，只能通过构造函数来模拟类；但是ES6有类
class Person{
	constructor(name,age){ //构造方法
		this.name=name;
		this.age=age;
	}
	
	static isHuman( obj ){
		return obj instanceof Person;
	}
	
	say(){
		console.log("我叫"+this.name+",年龄是"+this.age);
		
	}  //方法与方法间不要有,
}
Person.type = "哺乳类动物";  //静态属性定义

静态属性要在类之外定义！
静态方法中不能出现this

继承：
//程序员类
class Coder extends Person{
	constructor(name,age,salary){
		//调用父类的构造函数
		super(name,age);
		this.salary=salary;
	}
	
	say(){
		super.say();
		console.log("工资是"+this.salary);
	}
}

如果子类想要调用父类的静态方法也可以super.isHuman(obj);

子类一旦写了constructor()方法，那么就一定要在constructor中调用父类构造方法super(...)，否则会报错


使用new promise封装ajax
function ajax_get(url,params={}){
    return new Promise((resolve,reject)=>{
        $.get(url,params,(d)=>{
            resolve(d)
        },"json")
    })

}

或者

$().ready(function(){
    var p = ajaxGet("/index.php",{name:"zbp"});
    p.then((d)=>{console.log(d)},(err)=>{console.log(err)})
})
function ajaxGet(url,data,type="get"){
    var p = new Promise((resolve,reject)=>{
        
        $.ajax({
            url,
            type,
            data,
            success(d){
                resolve(d)
            },
            error(err){
                reject("Error")
            },
            dataType:"json"
        });
    });
    
    return p;
}

** 面向对象篇 **

如何定义一个对象

构造函数和this指向

对象的引用赋值,原型prototype和原型链__proto__
(原型中的属性和方法只开了一块内存)
原型链可以这么定义:是对象和构造函数prototype对象的联系,具体来说就是__proto__属性,原型链上存储着prototype对象定义的属性和方法
可以往原型中添加方法和属性,但是不要对原型直接赋值,因为原型中有自己本身的属性和方法

function Person(name,age){
	this.name=name;
	this.age=age;
}

# 不推荐,会清空prototype原有的属性和方法 如constructor和hasOwnProperty()
Person.prototype={  
	"showName":function(){
		alert(this.name);
	},
	"showAge":function(){
		alert(this.age);
	}
}

# 正确写法
Person.prototype.showName=function(){ ... }
Person.prototype.showAge=function(){ ... }



两种继承方法:(记住第一种即可)
例如:让学生类继承人类
function Person(name){
    this.name=name
}
Person.prototype.showName(){
    console.log(this.name)
}

1.普通继承
function Student(name){
    Person.call(this,name)
}
for(var attr in Person.prototype){
    Student.prototype[attr]=Person.prototype[attr]
}

2.类式继承
function Student(){

}
var F=function(){}
F.prototype = Person.prototype
Student.prototype=new F()
Student.prototype.constructor=Student




关于let,var和const的区别
let和var的区别:作用域不同,前者是块作用域,后者是方法作用域

体现在一个例子:
a = [1,2,3,4]

for(var i in a){        # 这里使用 let和var的区别请测试
    console.log(a[i])
}
console.log(i)

let和const区别:作用域相同,后者只能定义一次;const必须同时声明和赋值,不能先声明后赋值


function(){}和()=>{}的区别
1. 箭头函数不能作为构造函数(不能 new )
2.箭头函数可以使用...传多个参数
test1 = function (a,b,c){
    console.log(arguments)
}

test2 = (a,...myArgs)=>{
    console.log(myArgs)
    console.log(arguments)
}

test1(1)
test1(1,2)
test2(3,2,1)

# 结果
[Arguments] { '0': 1 }
[Arguments] { '0': 1, '1': 2 }
[ 2, 1 ]


3.this指向不同,箭头函数的this指向上层(如果上层是最顶层,那么在js中,箭头函数的this为window,在nodejs中箭头函数this为module.export而不是global);普通函数的this指向当前对象
name="hhh"
let obj = {
    name:"zbp",
    f1:()=>{
        console.log(this.name)
    },
    f2:function(){
        console.log(this.name)
    }
}

obj.f1()
obj.f2()





** JS核心10题

1.如何理解 JS 中的this关键字？

JS中的this关键字由函数的调用者决定，谁调用就this就指向哪个。如果找不到调用者，this将指向windows对象。
所以this指向调用某个方法或者变量的对象，而不是创建这个方法或者变量的对象。


由于 this 关键字很混乱，如何解决这个问题
首先弄清楚了this指向的对象，你就可以直接将它改成对象名。 否则，使用bind，call，apply函数也可以解决问题。


2.函数作用域
一个在函数中被定义的变量，在这个函数体中，以及该函数体中嵌套定义的所有函数内部都可见。嵌套函数中的同名本地变量也会覆盖其上层函数中的本地变量。

所以上层的变量可以在下层使用，下层的变量不能在上层使用，因为下层的变量的影响范围就只在定义这个变量的函数作用域中

这也是所谓的全局作用域和局部作用域。
全局作用域可以作用于局部作用域，但是反之不行。

3.什么是闭包
闭包是函数中的函数。但是这样答只看到了表面。
闭包是在一个作用域中创建了一个封闭的范围和环境，这个作用域中的所有局部变量构成了这个环境。而在这个作用域中又创建了一个函数，当这个函数在全局下被调用的时候，他使用的是被定义时的作用域下的环境而不是全局下的环境。

所以说闭包是函数中的函数不完全，应该是：闭包是函数中的函数+创建这个内部函数的词法环境

例如：
var scope = 'global scope';
function checkScope(){
     var scope = 'local scope';

     return function(){
         console.log( scope );
     }
}

var f = checkScope();
f();      // local scope


这里引出一个概念：词法作用域（lexical scoping）是指，函数在执行时，使用的是它被定义时的作用域，而不是这个函数被调用时的作用域。


如何在函数外部获取函数内部的值？
可以通过闭包获取。
function f1(){
        var n = 123;
        function f2(){    //f2是一个闭包
            alert(n)
        }    
        return f2;
    }
    
func = f1()
func()

之所以可以通过闭包在函数外部获取函数f1内的变量，是因为f1没有被释放掉，而f1没有被释放掉是因为f2被赋值到全局变量func，而f2依赖于f1，所以f1就不会被释放。而f2使用的作用域是f1这个函数中的作用域，所以f2中的变量n是f1中的变量n。
还是那句话，闭包使用的作用域不是调用时的作用域而是定义时的作用域。



在python中，闭包是定义在一个函数中的函数。但是要满足以下条件：1 外层函数要有定义有环境变量，在内层函数中会用到这个变量。
2.外层函数要return内层函数。
python中的闭包几乎和js中的一样


闭包的使用场景：
A 在函数外部获取函数内部的变量值
B 定义私有成员
//用闭包定义能访问私有函数和私有变量的公有函数。
    var counter = (function(){
        var privateCounter = 0; //环境变量作为私有变量
        function change(val){       //闭包作为私有方法
            privateCounter += val;
        }
        return {
            increment:function(){   //这三个闭包是公有方法，共享一个词法环境
                change(1);
            },
            decrement:function(){
                change(-1);
            },
            value:function(){
                return privateCounter;
            }
        };
    })();       //调用了一个匿名函数，该匿名函数将一个对象赋给counter
    
    这不是一个构造函数，因为没有使用new
    匿名函数将一个json对象赋值给counter，但是由于change函数没有定义在这个json对象中，所以这个对象不能直接调用change函数，但是这个对象可以通过调用 increment，decrement和value调用到change。所以change是私有方法。

C 可以在定时器中的回调函数中进行传参
    //原生的setTimeout传递的第一个函数不能带参数
    setTimeout(function(param){
        alert(param)
    },1000)


    //通过闭包可以实现传参效果
    function func(param){
        return function(){
            alert(param)
        }
    }
    var f1 = func(1);
    setTimeout(f1,1000);
    
  
  
4.解释一下变量的提升
先看一个有趣的现象

console.log(a)  # 报错

但是 
console.log(a)  # undefined
var a=1


关于变量的声明和赋值
var a=1
var b=2


js在解析上面的代码的时候，其实会按照下面的方式进行解析的：

var a;
var b;
a = 1;
b = 2;

也就是说，声明和赋值是不同的两个过程。

而且无论你是在哪里定义的变量，其声明都是在作用域的顶部。
例如 

var a=1
a++
var b=2
var d
var c = a+b
c--
d=10

真实的执行的过程为：
var a,b,c,d
a=1
a++
b=2
d=10
c=a+b
c--

无论你是在哪里声明或者赋值变量，所有变量的声明都会被提升都作用域顶部最开始的地方进行，而且是要将所有的变量都声明好才会按照顺序开始赋值


所以
console.log(a)  
var a=1

等价于

var a 
console.log(a)
a=1


变量的提升是JavaScript的默认行为，这意味着将所有变量声明移动到当前作用域的顶部，并且可以在声明之前使用变量。初始化不会被提升，提升仅作用于变量的声明。


5.JavaScript如何处理同步和异步情况
首先js是单线程。
尽管JavaScript是一种只有一个调用堆栈的单线程编程语言，但它也可以使用一个称为事件循环(event loop)的机制来处理一些异步函数。

同步或非同步，表明着是否需要将整个流程按顺序地完成
阻塞或非阻塞，意味着你调用的函数会不会立刻告诉你结果

假设js中的所有任务都是同步顺序执行，一些非常耗时的任务例如 定时器，事件监听和网络请求 ，会由于耗时过长导致页面假死（就是页面卡住了，其实页面没有卡住而是一直在执行那个耗时长的任务，其他任务都在等待）

例如ajax如果是同步请求，那么要等待响应返回
如果事件监听是同步的，那么要等待用户触发事件才会往下执行其他任务
如果定时器是同步的，那么要等待setTimeout中的秒数过完了才能执行里面回调函数的代码，才能往下执行其他代码。如果是setInterval就更惨了，一直都在执行定时器的回调函数而不能去执行其他下面的代码。

为了避免这种情况

js会将所有的任务分为两种：同步任务和异步任务

像一些正常的工作属于同步任务，会在js主线程排队顺序执行，实际上这些同步任务被放在一个栈中
像一些耗时很长的工作属于异步任务，浏览器会开辟新的线程来执行他们（傻孩子，js是单线程的，浏览器可不是单线程的），主要包括http请求线程，浏览器定时触发器，浏览器事件触发线程。
当一个异步的线程执行完之后，就会在一个消息队列中放置一个事件。（此时可以理解为，ajax的请求完毕了，但是回调函数还没被执行）

要等js主线程中的栈里面的任务都执行完了之后，js线程就会循环不断的从消息队列中读取事件，这个过程叫做事件循环。
如果读取到事件，就会将事件拿到栈中在js这个单线程上执行，而这个过程也是同步的串行的。（理解为，ajax的回调函数开始执行）

异步队列中的任务可能不会马上执行，因为堆栈中的任务全部完成了才会从队列中循环读取事件。


6 如何理解事件委托
事件委托相当于是让父元素去监听子元素的事件触发，通过事件冒泡的原理（当触发子元素的某个事件时会通过冒泡从而也触发到父元素），这个事件监听器是装在父元素上面而不是子元素上面。

就我所知的事件委托有两个应用场景：
1.子元素个数很多，如一个ul下有1000个li。需要循环1000次才能给1000个li注册完事件。如果使用事件委托，只需要在父元素上面注册一个事件即可监听所有子元素，提高了效率

2.当子元素是动态生成的时候



7 如何理解高阶函数，常见的高阶函数有哪些
在一切皆对象的js中，函数也是对象。
所以函数可以赋值给一个变量
我们可以将变量传给一个函数做参数
所以我们可以将一个函数传入另一个函数做参数。后者叫做高阶函数

常见的高阶函数 
map
filter
reduce
sort

8.声明函数和表达式函数
// 声明函数
function hello() {
  return "HELLO"
}    
// 表达式函数  
var h1 = function hello() {
  return "HELLO"
}

声明函数在解析期间定义，表达式函数在运行时定义;


9.解释原型继承是如何工作的
每一个构造函数都有一个prototype属性对象，当我们想定义一些静态变量或者定义类方法的时候会在prototype属性对象上定义而不会直接在构造函数中定义或者直接在对象中定义。
构造函数的prototype对象中有一个__proto__属性，这个属性会指向其父类的prototype对象

构造函数实例化出来的对象有一个__proto__的属性，这个__proto__会指向构造函数中的prototype对象。
所以当一个对象调用不存在的方法时，会从__proto__属性中寻找这个方法（也就是从构造函数的prototype对象中寻找这个方法），如果找不到，他会在prototype的__proto__属性中也就是他的父类的prototype找这个方法。
如果还找不到，会继续往父类的父类中的prototype去找，直到在Object这个构造函数中的prototype找，还找不到就会报错。

function Person(name,age){
    this.name=name;
    this.age = age;
    
    
}

Person.prototype.getInfo = function(){
    console.log(this.name+"|"+this.age)
}

console.log(Person)
console.log(Person.prototype)       # 里面有__proto__，指向父类Object的prototype

p = new Person()

console.log(p)
console.log(p.__proto__)            # 指向Person这个构造函数的prototype
console.log(p.prototype)            # undefined，对象没有prototype对象



10 解释一下严格模式(strict mode)

使用 "use strict" 就会进入严格模式
严格模式会要求代码严格遵循js的语法

例如： 
x=1   在非严格模式下不会报错，但是在严格模式下会报错

严格模式可以在某一个作用域下使用，例如在函数中使用use strict ，则函数中进入严格模式，而全局下是非严格模式



** 前端常见基础 50 题
1. javascript的typeof返回哪些数据类型.
答案：string,boolean,number,undefined,function,object

2. 例举3种强制类型转换和2种隐式类型转换?
答案：强制（parseInt,parseFloat,number）
隐式（== ===）

3. split() join() 的区别
答案：前者是将字符串切割成数组的形式，后者是将数组转换成字符串

4. 数组方法pop() push() unshift() shift()
答案：push()尾部添加 pop()尾部删除
unshift()头部添加 shift()头部删除

5. IE和标准下有哪些兼容性的写法
答案：
var ev = ev || window.event
document.documentElement.clientWidth || document.body.clientWidth
Var target = ev.srcElement||ev.target

纯js写的事件委托，通过判断 ev.target.nodeName 是等于子节点还是父节点。

顺便说说window对象下的对象
screen,location,history,document,navigator

6. ajax请求的时候get 和post方式的区别
答案：
一个在url后面 ，一个放在虚拟载体里面
get有大小限制(只能提交少量参数)
安全问题
应用不同 ，请求数据和提交数据

7. call和apply和bind的区别
答案：
obj1.func.call(obj2,arg1,arg2,arg3)
obj1.func.apply(obj2,arguments)
obj1.func.bind(obj2,arg1,arg2,arg3)()   # bind返回的是一个新的函数

8.ajax请求时，如何解析json数据
答案：JSON.parse，JSON.stringify


9. 事件委托是什么
答案: 利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！


10. 闭包是什么，有什么特性，对页面有什么影响
答案：闭包就是能够读取其他函数内部变量的函数,使得函数不被GC回收，如果过多使用闭包，容易导致内存泄露

11. 如何阻止事件冒泡
答案：ie:阻止冒泡ev.cancelBubble = true;非IE ev.stopPropagation();

12. 如何阻止默认事件
答案：(1)return false；(2) ev.preventDefault();

13. 添加 删除 替换 插入到某个接点的方法
答案：

1）创建新节点
createElement() //创建一个具体的元素
createTextNode() //创建一个文本节点

2）添加、移除、替换、插入
appendChild() //添加
removeChild() //移除
replaceChild() //替换
insertBefore() //插入

3）查找
getElementsByTagName() //通过标签名称
getElementsByName() //通过元素的Name属性的值
getElementById() //通过元素Id，唯一性

14. 解释jsonp的原理，以及为什么不是真正的ajax;请写一个jsonp跨域请求
答案：动态创建script标签，回调函数
Ajax是页面无刷新请求数据操作

前端
<html>
<head>
    <script>
        window.onload=function(){
            var script = document.createElement("script")
            script.src="https://zbpblog.com/script/jsonp.php?cb=test&key=t2"
            
            document.body.appendChild(script);
            
        }
        function test(value){
            console.log(value);
        }
    </script>
</head>
<body>
    
</body>
</html>

后端
<?php
    $cb = $_GET["cb"];
    $key = $_GET['key'];
	$arr=[
		"t1"=>1,
		"t2"=>2,
		"t3"=>3
	];
	if(isset($arr[$key])){
        echo $cb."({$arr[$key]})";
    }
?>

被解析后的代码:
<html><head>
    <script>
        window.onload=function(){
            var script = document.createElement("script")
            script.src="https://zbpblog.com/script/jsonp.php?cb=test&key=t2"
            
            document.body.appendChild(script);
            
        }
        function test(value){
            console.log(value);
        }
    </script>
</head>
<body>
    

<script src="https://zbpblog.com/script/jsonp.php?cb=test&amp;key=t2"></script></body></html>


使用jQuery做跨域
$().ready(function(){    
    $.ajax({
        url:'https://zbpblog.com/script/jsonp.php?key=t2',
        dataType:"jsonp",
        jsonp: "cb",
        jsonpCallback:"test",
        success:function(data){
            console.log(data);
        }
    });
})

15. document load 和document ready的区别
答案：document.onload 是在结构和样式,外部js以及图片加载完才执行js(应该是window.onload才对)
document.ready是dom树创建完成就执行的方法，原生种没有这个方法，jquery中有 $().ready(function)

16. ”==”和“===”的不同
答案：前者会自动转换类型,再判断是否相等
后者不会自动类型转换，直接去比较

17. 函数声明与函数表达式的区别？
在Javscript中，解析器在向执行环境中加载数据时，对函数声明和函数表达式并非是一视同仁的，解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问），至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解析执行。

18. 对作用域上下文和this的理解，看下列代码：
var User = {
 count: 1,
 getCount: function() {
  return this.count;
 }
};
console.log(User.getCount()); // what?
var func = User.getCount;
console.log(func()); // what?
问两处console输出什么？为什么？
答案:是1和undefined。
func是在window的上下文中被执行的，所以不会访问到count属性。

19. 看下面代码，给出输出结果。

for(var i = 1; i <= 3; i++){  //建议使用let 可正常输出i的值
  setTimeout(function(){
      console.log(i);   
  },0); 
};
答案：4 4 4。
原因：Javascript事件处理器在线程空闲之前不会运行。

20. 当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做?
box.onlick= function(){}
box.addEventListener("click",function(){},false);
<button onclick="xxx()"></button>


22. 看下列代码,输出什么?解释原因。
var a = null;
alert(typeof a);
答案：object
解释：null是一个只有一个值的数据类型，这个值就是null。表示一个空指针对象，所以用typeof检测会返回”object”。


24. 回答以下代码，alert的值分别是多少？
<script>
     var a = 100;  
     function test(){  
        alert(a);  
     a = 10;  //去掉了var 就变成定义了全局变量了
        alert(a);  
}  
test();
alert(a);
</script>
正确答案是： 100， 10， 10



25. javaScript的2种变量范围有什么不同？
全局变量：当前页面内有效

局部变量：函数方法内有效

26. null和undefined的区别？
null是一个表示"无"的对象，转为数值时为0；undefined是一个表示"无"的原始值，转为数值时为NaN。

当声明的变量还未被初始化时，变量的默认值为undefined。 null用来表示尚未存在的对象

undefined表示"缺少值"，就是此处应该有一个值，但是还没有定义。典型用法是：

（1）变量被声明了，但没有赋值时，就等于undefined。

（2）调用函数时，应该提供的参数没有提供，该参数等于undefined。

（3）对象没有赋值的属性，该属性的值为undefined。

（4）函数没有返回值时，默认返回undefined。

null表示"没有对象"，即该处不应该有值。典型用法是：

（1） 作为函数的参数，表示该函数的参数不是对象。

（2） 作为对象原型链的终点。

27. new操作符具体干了什么呢?
1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。

2、属性和方法被加入到 this 引用的对象中。

3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。

28. js延迟加载的方式有哪些？
defer和async、动态创建DOM方式（创建script，插入到DOM中，加载完毕后callBack）、按需异步载入js

29. Flash、Ajax各自的优缺点，在使用中如何取舍？
Flash ajax对比

(1)Flash适合处理多媒体、矢量图形、访问机器；对CSS、处理文本上不足，不容易被搜索。

(2)ajax对CSS、文本支持很好，支持搜索；多媒体、矢量图形、机器访问不足。

共同点：与服务器的无刷新传递消息、用户离线和在线状态、操作DOM
30. 写一个获取非行间样式的函数
function getStyle(obj,attr) {
if(obj.currentStyle) {
return obj.currentStyle[attr];
}else{
getComputedStyle(obi,false)[attr] 
}

}
31. 希望获取到页面中所有的checkbox怎么做？(不使用第三方框架)
var inputs = document.getElementsByTagName("input");//获取所有的input标签对象
var checkboxArray = [];//初始化空数组，用来存放checkbox对象。
for(var i=0;i<inputs.length;i++){
  var obj = inputs[i];
  if(obj.type=='checkbox'){
     checkboxArray.push(obj);
  }
}
32. 写一个function，清除字符串前后的空格。（兼容所有浏览器）
String.prototype.trim= function(){

return this.replace(/^\s+/,"").replace(/\s+$/,"");


}
33. javascript语言特性中，有很多方面和我们接触的其他编程语言不太一样,请举例
javascript语言实现继承机制的核心就是  (原型)，而不是Java语言那样的类式继承。Javascript解析引擎在读取一个Object的属性的值时，会沿着  (原型链)向上寻找，如果最终没有找到，则该属性值为 undefined；如果最终找到该属性的值，则返回结果。与这个过程不同的是，当javascript解析引擎执行“给一个Object的某个属性赋值”的时候，如果当前Object存在该属性，则改写该属性的值，如果当前的Object本身并不存在该属性，则赋值该属性的值。

35. 如何获取javascript三个数中的最大值和最小值？
Math.max(a,b,c);//最大值

Math.min(a,b,c)//最小值


36. javascript是面向对象的，怎么体现javascript的继承关系？
使用prototype原型来实现。


37. .form中的input可以设置为readonly和disable，请问2者有什么区别？
readonly不可编辑，但可以选择和复制；值可以传递到后台
disabled不能编辑，不能复制，不能选择；值不可以传递到后台


38. 列举javaScript的3种主要数据类型，2种复合数据类型和2种特殊数据类型。
主要数据类型：string, boolean, number

复合数据类型：function, object

特殊类型：undefined，null


39. 程序中捕获异常的方法？
try{
 
}catch(e){
 
}finally{
 
}


40. Ajax原理

(1)创建对象

var xhr = new XMLHttpRequest();

(2)打开请求

xhr.open('GET', 'example.txt', true);

(3)发送请求

xhr.send(); 发送请求到服务器

(4)接收响应

xhr.onreadystatechange =function(){}

(1)当readystate值从一个值变为另一个值时，都会触发readystatechange事件。

(2)当readystate==4时，表示已经接收到全部响应数据。

(3)当status ==200时，表示服务器成功返回页面和数据。

(4)如果(2)和(3)内容同时满足，则可以通过xhr.responseText，获得服务器返回的内容。



41.解释什么是Json:
JSON 是一种轻量级的跨语言和平台的数据交换格式。


44. 浏览器的滚动距离：
可视区域距离页面顶部的距离

scrollTop=document.documentElement.scrollTop||document.body.scrollTop

45. 可视区的大小：
(1)innerXXX（不兼容ie）

window.innerHeight 可视区高度，包含滚动条宽度

window.innerWidth 可视区宽度，包含滚动条宽度

(2)document.documentElement.clientXXX(兼容ie)

document.documentElement.clientWidth可视区宽度，不包含滚动条宽度

document.documentElement.clientHeight可视区高度，不包含滚动条宽度

46. 节点的种类有几种，分别是什么？
(1)元素节点：nodeType ===1;

(2)文本节点：nodeType ===3;

(3)属性节点：nodeType ===2;

47. innerHTML和outerHTML的区别
innerHTML(元素内包含的内容）

outerHTML(自己以及元素内的内容）

48. offsetWidth offsetHeight和clientWidth clientHeight的区别
(1)offsetWidth （content宽度+padding宽度+border宽度）

(2)offsetHeight（content高度+padding高度+border高度）

(3)clientWidth（content宽度+padding宽度）

(4)clientHeight（content高度+padding高度）


49. 闭包的好处
(1)希望一个变量长期驻扎在内存当中(不被垃圾回收机制回收)

(2)避免全局变量的污染

(3)私有成员的存在

(4)安全性提高


50.冒泡排序和快速排序
冒泡排序的原理:对一个有n个元素的数组遍历,内层的遍历每遍历一次都会将临时数组的最大值拍到数组尾部,外层遍历会减少临时数组的长度让内层遍历对临时数组排序而不会对已经排好序的最大值再排序
$().ready(function(){
    var arr = [4,2,6,8,1,2,5];
    for(var len=arr.length;len>0;len--){
        for(var i=0;i<len;i++){
            if(arr[i]>arr[i+1]){
                var tmp = arr[i+1]
                arr[i+1]=arr[i]
                arr[i]=tmp
            }
        }
    }
    console.log(arr)
})

快速排序的原理是递归
function quickSort(arr) {
    arr = arr.concat();
    if(arr.length<=1){
        return arr
    }
    let left=[], right=[];
     let basis = arr.splice(0,1);
    arr.forEach(function (v) {
        if(v<basis){
            left.push(v)
        }else{
            right.push(v)
        }
    });
    return quickSortTwo(left).concat(basis,quickSortTwo(right))
}



51 深度克隆和浅度克隆
// 浅克隆函数
function shallowClone(o) {
  const obj = {};
  for ( let i in o) {
    obj[i] = o[i];
  }
  return obj;
}
// 被克隆对象
const oldObj = {
  a: 1,
  b: [ 'e', 'f', 'g' ],
  c: { h: { i: 2 } }
};

const newObj = shallowClone(oldObj);
console.log(newObj.c.h, oldObj.c.h); // { i: 2 } { i: 2 }
console.log(oldObj.c.h === newObj.c.h); // true





//深度克隆 
function clone(obj){
    var oNew = new obj.constructor(obj.valueOf());
    if(obj.constructor == Object){
        for(var i in obj){
            oNew[i] = obj[i];
            if(typeof(oNew[i]) == 'object'){
                clone(oNew[i]);
            }
        }
    }
    return oNew;
}



//如果是对一个json进行深度克隆只需
var json={...}
var newJson = JSON.parse(JSON.stringify(json))
